#!/usr/bin/env python3
"""
Script de validation de la migration
V√©rifie que tous les fichiers sont en place et la structure est correcte
"""

import os
import json
from pathlib import Path

def check_file_exists(file_path, description=""):
    """V√©rifie qu'un fichier existe"""
    path = Path(file_path)
    exists = path.exists()
    status = "‚úÖ" if exists else "‚ùå"
    print(f"  {status} {file_path} {description}")
    return exists

def check_directory_structure():
    """V√©rifie la structure des dossiers"""
    print("üìÅ V√©rification de la structure des dossiers:")
    
    required_dirs = [
        "js",
        "js/config", 
        "js/modules",
        "js/modules/ui",
        "js/modules/features", 
        "js/modules/pages",
        "js/utils",
        "js/tests",
        "js/docs"
    ]
    
    all_exist = True
    for dir_path in required_dirs:
        exists = Path(dir_path).exists()
        status = "‚úÖ" if exists else "‚ùå"
        print(f"  {status} {dir_path}/")
        if not exists:
            all_exist = False
    
    return all_exist

def check_js_files():
    """V√©rifie tous les fichiers JavaScript"""
    print("\nüîß V√©rification des fichiers JavaScript:")
    
    js_files = [
        # Config
        ("js/config/settings.js", "Configuration globale"),
        ("js/config/translations.js", "Traductions multilingues"),
        
        # Utils
        ("js/utils/logger.js", "Syst√®me de logging"),
        ("js/utils/dom.js", "Utilitaires DOM"),
        ("js/utils/performance.js", "Optimisations performance"),
        ("js/utils/stateManager.js", "Gestionnaire d'√©tat"),
        ("js/utils/storage.js", "Gestion localStorage"),
        ("js/utils/lazyLoader.js", "Chargement diff√©r√©"),
        ("js/utils/events.js", "Syst√®me d'√©v√©nements"),
        ("js/utils/errorHandler.js", "Gestion d'erreurs"),
        
        # Modules UI
        ("js/modules/ui/darkMode.js", "Mode sombre"),
        ("js/modules/ui/loader.js", "√âcran de chargement"),
        ("js/modules/ui/carousel.js", "Carrousels"),
        ("js/modules/ui/drawer.js", "Menu mobile"),
        ("js/modules/ui/header.js", "Header"),
        ("js/modules/ui/animations.js", "Animations"),
        
        # Modules Features
        ("js/modules/features/language.js", "Multilingue"),
        ("js/modules/features/cookies.js", "Gestion cookies"),
        ("js/modules/features/forms.js", "Formulaires"),
        ("js/modules/features/navigation.js", "Navigation"),
        ("js/modules/features/expertiseNav.js", "Navigation expertise"),
        ("js/modules/features/blog.js", "Blog"),
        
        # Modules Pages
        ("js/modules/pages/home.js", "Page d'accueil"),
        ("js/modules/pages/contact.js", "Page contact"),
        ("js/modules/pages/expertises.js", "Page expertises"),
        ("js/modules/pages/team.js", "Pages √©quipe"),
        
        # Point d'entr√©e
        ("js/main.js", "Application principale"),
        
        # Tests et docs
        ("js/tests/utils.test.js", "Tests unitaires"),
        ("js/docs/README.md", "Documentation"),
        ("js/docs/MIGRATION.md", "Guide migration"),
        ("js/docs/ARCHITECTURE.md", "Architecture")
    ]
    
    all_exist = True
    for file_path, description in js_files:
        if not check_file_exists(file_path, f"- {description}"):
            all_exist = False
    
    return all_exist

def check_html_updates():
    """V√©rifie que les fichiers HTML ont √©t√© mis √† jour"""
    print("\nüìÑ V√©rification des mises √† jour HTML:")
    
    html_files = [
        'index.html',
        'cabinet.html',
        'expertises.html', 
        'honoraires.html',
        'contact.html',
        'blog.html',
        'consultation.html'
    ]
    
    updated_count = 0
    total_count = 0
    
    for html_file in html_files:
        path = Path(html_file)
        total_count += 1
        
        if path.exists():
            with open(path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # V√©rifie si le nouveau script est pr√©sent
            if 'js/main.js' in content and 'type="module"' in content:
                print(f"  ‚úÖ {html_file} - Mis √† jour")
                updated_count += 1
            elif 'script.js' in content:
                print(f"  ‚ö†Ô∏è  {html_file} - Ancien script d√©tect√©")
            else:
                print(f"  ‚ùì {html_file} - √âtat inconnu")
        else:
            print(f"  ‚ùå {html_file} - Fichier manquant")
    
    print(f"\nüìä R√©sultat: {updated_count}/{total_count} fichiers mis √† jour")
    return updated_count == total_count

def check_backup():
    """V√©rifie que la sauvegarde existe"""
    print("\nüíæ V√©rification de la sauvegarde:")
    return check_file_exists("script.js.backup", "- Sauvegarde de l'ancien code")

def check_package_json():
    """V√©rifie le package.json"""
    print("\nüì¶ V√©rification de la configuration:")
    
    if check_file_exists("package.json", "- Configuration npm"):
        try:
            with open("package.json", 'r') as f:
                pkg = json.load(f)
            
            print(f"  ‚ÑπÔ∏è  Nom: {pkg.get('name', 'N/A')}")
            print(f"  ‚ÑπÔ∏è  Version: {pkg.get('version', 'N/A')}")
            print(f"  ‚ÑπÔ∏è  Type: {pkg.get('type', 'N/A')}")
            return True
        except Exception as e:
            print(f"  ‚ùå Erreur lecture package.json: {e}")
            return False
    
    return False

def generate_validation_report():
    """G√©n√®re un rapport de validation"""
    print("\n" + "="*60)
    print("üìã RAPPORT DE VALIDATION DE MIGRATION")
    print("="*60)
    
    checks = [
        ("Structure des dossiers", check_directory_structure()),
        ("Fichiers JavaScript", check_js_files()),
        ("Mises √† jour HTML", check_html_updates()),
        ("Sauvegarde", check_backup()),
        ("Configuration", check_package_json())
    ]
    
    passed = sum(1 for _, result in checks if result)
    total = len(checks)
    
    print(f"\nüìä R√âSUM√â FINAL:")
    print(f"   ‚úÖ Tests r√©ussis: {passed}/{total}")
    print(f"   üìà Pourcentage: {(passed/total)*100:.1f}%")
    
    if passed == total:
        print(f"\nüéâ MIGRATION R√âUSSIE !")
        print(f"üöÄ Vous pouvez maintenant tester avec:")
        print(f"   python3 start-server.py")
        print(f"   Puis ouvrir: http://localhost:8000")
    else:
        print(f"\n‚ö†Ô∏è  MIGRATION INCOMPL√àTE")
        print(f"üîß V√©rifiez les √©l√©ments marqu√©s ‚ùå ci-dessus")
    
    return passed == total

if __name__ == "__main__":
    success = generate_validation_report()
    exit(0 if success else 1)